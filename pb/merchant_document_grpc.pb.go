// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: merchant_document.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantDocumentService_FindAll_FullMethodName            = "/pb.MerchantDocumentService/FindAll"
	MerchantDocumentService_FindAllActive_FullMethodName      = "/pb.MerchantDocumentService/FindAllActive"
	MerchantDocumentService_FindAllTrashed_FullMethodName     = "/pb.MerchantDocumentService/FindAllTrashed"
	MerchantDocumentService_FindById_FullMethodName           = "/pb.MerchantDocumentService/FindById"
	MerchantDocumentService_Create_FullMethodName             = "/pb.MerchantDocumentService/Create"
	MerchantDocumentService_Update_FullMethodName             = "/pb.MerchantDocumentService/Update"
	MerchantDocumentService_UpdateStatus_FullMethodName       = "/pb.MerchantDocumentService/UpdateStatus"
	MerchantDocumentService_Trashed_FullMethodName            = "/pb.MerchantDocumentService/Trashed"
	MerchantDocumentService_Restore_FullMethodName            = "/pb.MerchantDocumentService/Restore"
	MerchantDocumentService_DeletePermanent_FullMethodName    = "/pb.MerchantDocumentService/DeletePermanent"
	MerchantDocumentService_RestoreAll_FullMethodName         = "/pb.MerchantDocumentService/RestoreAll"
	MerchantDocumentService_DeleteAllPermanent_FullMethodName = "/pb.MerchantDocumentService/DeleteAllPermanent"
)

// MerchantDocumentServiceClient is the client API for MerchantDocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantDocumentServiceClient interface {
	FindAll(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocument, error)
	FindAllActive(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocument, error)
	FindAllTrashed(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocumentAt, error)
	FindById(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
	Create(ctx context.Context, in *CreateMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
	Update(ctx context.Context, in *UpdateMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
	UpdateStatus(ctx context.Context, in *UpdateMerchantDocumentStatusRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
	Trashed(ctx context.Context, in *TrashedMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
	Restore(ctx context.Context, in *RestoreMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error)
	DeletePermanent(ctx context.Context, in *DeleteMerchantDocumentPermanentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentDelete, error)
	RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentAll, error)
	DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentAll, error)
}

type merchantDocumentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantDocumentServiceClient(cc grpc.ClientConnInterface) MerchantDocumentServiceClient {
	return &merchantDocumentServiceClient{cc}
}

func (c *merchantDocumentServiceClient) FindAll(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) FindAllActive(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentService_FindAllActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) FindAllTrashed(ctx context.Context, in *FindAllMerchantDocumentsRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDocumentAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDocumentAt)
	err := c.cc.Invoke(ctx, MerchantDocumentService_FindAllTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) FindById(ctx context.Context, in *FindMerchantDocumentByIdRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) Create(ctx context.Context, in *CreateMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) Update(ctx context.Context, in *UpdateMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) UpdateStatus(ctx context.Context, in *UpdateMerchantDocumentStatusRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentService_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) Trashed(ctx context.Context, in *TrashedMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentService_Trashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) Restore(ctx context.Context, in *RestoreMerchantDocumentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocument)
	err := c.cc.Invoke(ctx, MerchantDocumentService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) DeletePermanent(ctx context.Context, in *DeleteMerchantDocumentPermanentRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocumentDelete)
	err := c.cc.Invoke(ctx, MerchantDocumentService_DeletePermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) RestoreAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocumentAll)
	err := c.cc.Invoke(ctx, MerchantDocumentService_RestoreAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDocumentServiceClient) DeleteAllPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantDocumentAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDocumentAll)
	err := c.cc.Invoke(ctx, MerchantDocumentService_DeleteAllPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantDocumentServiceServer is the server API for MerchantDocumentService service.
// All implementations must embed UnimplementedMerchantDocumentServiceServer
// for forward compatibility.
type MerchantDocumentServiceServer interface {
	FindAll(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocument, error)
	FindAllActive(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocument, error)
	FindAllTrashed(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocumentAt, error)
	FindById(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocument, error)
	Create(context.Context, *CreateMerchantDocumentRequest) (*ApiResponseMerchantDocument, error)
	Update(context.Context, *UpdateMerchantDocumentRequest) (*ApiResponseMerchantDocument, error)
	UpdateStatus(context.Context, *UpdateMerchantDocumentStatusRequest) (*ApiResponseMerchantDocument, error)
	Trashed(context.Context, *TrashedMerchantDocumentRequest) (*ApiResponseMerchantDocument, error)
	Restore(context.Context, *RestoreMerchantDocumentRequest) (*ApiResponseMerchantDocument, error)
	DeletePermanent(context.Context, *DeleteMerchantDocumentPermanentRequest) (*ApiResponseMerchantDocumentDelete, error)
	RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseMerchantDocumentAll, error)
	DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantDocumentAll, error)
	mustEmbedUnimplementedMerchantDocumentServiceServer()
}

// UnimplementedMerchantDocumentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantDocumentServiceServer struct{}

func (UnimplementedMerchantDocumentServiceServer) FindAll(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) FindAllActive(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllActive not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) FindAllTrashed(context.Context, *FindAllMerchantDocumentsRequest) (*ApiResponsePaginationMerchantDocumentAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTrashed not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) FindById(context.Context, *FindMerchantDocumentByIdRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) Create(context.Context, *CreateMerchantDocumentRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) Update(context.Context, *UpdateMerchantDocumentRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) UpdateStatus(context.Context, *UpdateMerchantDocumentStatusRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) Trashed(context.Context, *TrashedMerchantDocumentRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trashed not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) Restore(context.Context, *RestoreMerchantDocumentRequest) (*ApiResponseMerchantDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) DeletePermanent(context.Context, *DeleteMerchantDocumentPermanentRequest) (*ApiResponseMerchantDocumentDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermanent not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) RestoreAll(context.Context, *emptypb.Empty) (*ApiResponseMerchantDocumentAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAll not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) DeleteAllPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantDocumentAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllPermanent not implemented")
}
func (UnimplementedMerchantDocumentServiceServer) mustEmbedUnimplementedMerchantDocumentServiceServer() {
}
func (UnimplementedMerchantDocumentServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantDocumentServiceServer will
// result in compilation errors.
type UnsafeMerchantDocumentServiceServer interface {
	mustEmbedUnimplementedMerchantDocumentServiceServer()
}

func RegisterMerchantDocumentServiceServer(s grpc.ServiceRegistrar, srv MerchantDocumentServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantDocumentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantDocumentService_ServiceDesc, srv)
}

func _MerchantDocumentService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).FindAll(ctx, req.(*FindAllMerchantDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_FindAllActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).FindAllActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_FindAllActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).FindAllActive(ctx, req.(*FindAllMerchantDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_FindAllTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).FindAllTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_FindAllTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).FindAllTrashed(ctx, req.(*FindAllMerchantDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMerchantDocumentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).FindById(ctx, req.(*FindMerchantDocumentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).Create(ctx, req.(*CreateMerchantDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).Update(ctx, req.(*UpdateMerchantDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantDocumentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).UpdateStatus(ctx, req.(*UpdateMerchantDocumentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_Trashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrashedMerchantDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).Trashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_Trashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).Trashed(ctx, req.(*TrashedMerchantDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreMerchantDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_Restore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).Restore(ctx, req.(*RestoreMerchantDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_DeletePermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMerchantDocumentPermanentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).DeletePermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_DeletePermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).DeletePermanent(ctx, req.(*DeleteMerchantDocumentPermanentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_RestoreAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).RestoreAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_RestoreAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).RestoreAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDocumentService_DeleteAllPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDocumentServiceServer).DeleteAllPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDocumentService_DeleteAllPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDocumentServiceServer).DeleteAllPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantDocumentService_ServiceDesc is the grpc.ServiceDesc for MerchantDocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantDocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MerchantDocumentService",
	HandlerType: (*MerchantDocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _MerchantDocumentService_FindAll_Handler,
		},
		{
			MethodName: "FindAllActive",
			Handler:    _MerchantDocumentService_FindAllActive_Handler,
		},
		{
			MethodName: "FindAllTrashed",
			Handler:    _MerchantDocumentService_FindAllTrashed_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _MerchantDocumentService_FindById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MerchantDocumentService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MerchantDocumentService_Update_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _MerchantDocumentService_UpdateStatus_Handler,
		},
		{
			MethodName: "Trashed",
			Handler:    _MerchantDocumentService_Trashed_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _MerchantDocumentService_Restore_Handler,
		},
		{
			MethodName: "DeletePermanent",
			Handler:    _MerchantDocumentService_DeletePermanent_Handler,
		},
		{
			MethodName: "RestoreAll",
			Handler:    _MerchantDocumentService_RestoreAll_Handler,
		},
		{
			MethodName: "DeleteAllPermanent",
			Handler:    _MerchantDocumentService_DeleteAllPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_document.proto",
}
